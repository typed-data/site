---
import Layout from '../components/layout.astro';
---



<Layout
  title="Typed Data"
  description="Exploration into writing ML data pipelines with Rust"
  home
>
  <main>

    <p class="mb-4">
    ML <a href="/data-pipelines">data pipelines</a> sit between the data provider
    and the ML training loop. The processing needs to be high-performance in order
    to obtain good GPU utilization, but it needs to be flexible enough to support
    the typical ML experimentation.
    </p>

    <p class="mb-4">
    <b>Python</b> is frequently the first choice for ML data pipelines.
    Dictionaries and dataframes (Panda, Polars) are abstractions
    that are flexible. If used correctly they are also 
    performant, but scaling the pipelines and maintaining them
    can be a non-linear process: when hitting performance 
    issues it can be difficult to diagnose them and then 
    evolve the design.
    </p>

    <p class="mb-4">
    <b>Rust</b> promises better performance and tooling around basic
    performance management. However the code is a lot more
    verbose and memory considerations can slow down development,
    specially for devs not familiar with the language.
    </p>

    <p>
    <b>Typed Data</b> explores macros, code generation and framework design
    to reduce the cognitive burden when using Rust
    for data pipelines. Other languages will be evaluated
    in the future.
    </p>
    
  </main>
</Layout>
